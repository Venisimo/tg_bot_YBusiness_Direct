import pandas as pd
import numpy as np
from settings.yandex_direct import HIGH_BOUNCE_RATE_THRESHOLD

COST_WARNING_THRESHOLD = 2500

def _group_data(df: pd.DataFrame, group_by: str) -> pd.DataFrame:
    agg_dict = {
        'Impressions': 'sum',
        'Clicks': 'sum', 
        'Cost': 'sum',
        'Conversions': 'sum',
        'Sessions': 'sum',
        'Bounces': 'sum'
    }
    return df.groupby(group_by).agg(agg_dict).reset_index()

def _calculate_metrics(df: pd.DataFrame) -> pd.DataFrame:
    df['CTR'] = np.where(df['Impressions'] > 0, (df['Clicks'] / df['Impressions'] * 100).round(2), 0)
    df['CPC'] = np.where(df['Clicks'] > 0, (df['Cost'] / df['Clicks']).round(2), 0)
    df['CR']  = np.where(df['Clicks'] > 0, (df['Conversions'] / df['Clicks'] * 100).round(2), 0)
    df['CPA'] = np.where(df['Conversions'] > 0, (df['Cost'] / df['Conversions']).round(2), 0)
    df['BounceRate'] = np.where(df['Sessions'] > 0, (df['Bounces'] / df['Sessions'] * 100).round(2), 0)
    return df

def _rename_columns_to_russian(df: pd.DataFrame) -> pd.DataFrame:
    russian_names = {
        'Impressions': '–ü–æ–∫–∞–∑—ã',
        'Clicks': '–ö–ª–∏–∫–∏',
        'Cost': '–†–∞—Å—Ö–æ–¥',
        'Conversions': '–ö–æ–Ω–≤–µ—Ä—Å–∏–∏',
        'Sessions': '–°–µ—Å—Å–∏–∏',
        'Bounces': '–û—Ç–∫–∞–∑—ã',
        'BounceRate': '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤',
        'CampaignName': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏',
        'Age': '–í–æ–∑—Ä–∞—Å—Ç',
        'Gender': '–ü–æ–ª',
        'Device': '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
        'Date': '–î–∞—Ç–∞'
    }
    return df.rename(columns=russian_names)

def _add_conditional_formatting(df: pd.DataFrame) -> pd.DataFrame:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞—Å—Ö–æ–¥–æ–º –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∏ –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –æ—Ç–∫–∞–∑–æ–≤"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
    mask = (df['Cost'] > COST_WARNING_THRESHOLD) & (df['Conversions'] == 0)
    df['Cost'] = df['Cost'].astype(str)
    df.loc[mask, 'Cost'] = df.loc[mask, 'Cost'].apply(lambda x: f'{x} ‚ö†Ô∏è')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç–∫–∞–∑–æ–≤
    bounce_mask = df['BounceRate'] > HIGH_BOUNCE_RATE_THRESHOLD
    df['BounceRate'] = df['BounceRate'].astype(str)
    df.loc[bounce_mask, 'BounceRate'] = df.loc[bounce_mask, 'BounceRate'].apply(lambda x: f'{x} üî¥')
    
    return df

def proccess_data(data: list[dict], group_by: str = None) -> list[dict]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ DataFrame –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫.
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç CTR, CPC, CR –∏ CPA –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏.
    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–æ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
    –î–æ–±–∞–≤–ª—è–µ—Ç —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.
    
    Args:
        data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
        group_by: –ü–æ–ª–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏. –ï—Å–ª–∏ None - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    """
    df = pd.DataFrame(data)
    
    if group_by and group_by in df.columns:
        df = _group_data(df, group_by)
        
    df = _calculate_metrics(df)
    df = _add_conditional_formatting(df)
    df = _rename_columns_to_russian(df)
    return df.to_dict('records')