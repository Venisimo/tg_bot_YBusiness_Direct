from typing import List, Union
import pandas as pd
from models.account import Account
from models.yandex_direct import YandexDirectStatistics
from modules.yandex_direct.pandas_stat_proccessor import proccess_data
from settings.yandex_direct import LOW_BUDGET_THRESHOLD

class SummaryStatisticsFormatter:
    @staticmethod
    def format_statistics_for_telegram(accounts: List[Account], statistics: List[Union[List[YandexDirectStatistics], Exception]], 
                                      budgets: List[Union[float, Exception]] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–ª—è Telegram –∏—Å–ø–æ–ª—å–∑—É—è pandas –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤.
        
        :param accounts: –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        :param statistics: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        :param budgets: –°–ø–∏—Å–æ–∫ –±—é–¥–∂–µ—Ç–æ–≤ –∏–ª–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram
        """
        result = []
        
        for i, (account, stats) in enumerate(zip(accounts, statistics)):
            result.append(f"‚Ä¢*{account.account_name}*\n")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if budgets and i < len(budgets):
                budget = budgets[i]
                if isinstance(budget, Exception):
                    error_text = str(budget).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`").replace("[", "\\[").replace("]", "\\]")
                    result.append(f"–ë–∞–ª–∞–Ω—Å: ‚ùå `{error_text}`\n")
                else:
                    emoji = "üî¥" if budget.budget < LOW_BUDGET_THRESHOLD else ""
                    result.append(f"–ë–∞–ª–∞–Ω—Å: `{budget.budget}` ‚ÇΩ {emoji}\n")
            
            if isinstance(stats, Exception):
                error_text = str(stats).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`").replace("[", "\\[").replace("]", "\\]")
                result.append(f"‚ùå `{error_text}`\n")
            else:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                data = [stat.model_dump() for stat in stats]
                
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not data:
                    data = [{
                        'Impressions': 0,
                        'Clicks': 0,
                        'Cost': 0.0,
                        'Conversions': 0,
                        'Sessions': 0,
                        'Bounces': 0
                    }]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º proccess_data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processed = proccess_data(data)
                totals = processed[0] if processed else {}
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                result.extend([
                    f"–ü–æ–∫–∞–∑—ã: `{totals.get('–ü–æ–∫–∞–∑—ã', 0)}`\n",
                    f"–ö–ª–∏–∫–∏: `{totals.get('–ö–ª–∏–∫–∏', 0)}`\n",
                    f"–†–∞—Å—Ö–æ–¥: `{totals.get('–†–∞—Å—Ö–æ–¥', 0)}` ‚ÇΩ\n",
                    f"–ö–æ–Ω–≤–µ—Ä—Å–∏–∏: `{totals.get('–ö–æ–Ω–≤–µ—Ä—Å–∏–∏', 0)}`\n",
                    f"–°–µ—Å—Å–∏–∏: `{totals.get('–°–µ—Å—Å–∏–∏', 0)}`\n",
                    f"–û—Ç–∫–∞–∑—ã: `{totals.get('–û—Ç–∫–∞–∑—ã', 0)}`\n",
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤: `{totals.get('–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤', 0)}`%\n",
                    f"CTR: `{float(totals.get('CTR', 0))}`%\n",
                    f"CPC: `{float(totals.get('CPC', 0))}` ‚ÇΩ\n",
                    f"CR: `{float(totals.get('CR', 0))}`%\n",
                    f"CPA: `{float(totals.get('CPA', 0))}` ‚ÇΩ\n"
                ])
            
            result.append("\n")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            
        return "".join(result) 