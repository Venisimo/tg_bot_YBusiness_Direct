import json
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ErrorEvent, BotCommand, BotCommandScopeDefault
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from database.db import add_account, delete_account, get_all_accounts, get_account_by_id
from enums.sources import Source
from services.report_processor import ReportProcessor
from bot.keyboards import main_menu_keyboard, source_selection_keyboard, source_selection_keyboard, period_selection_keyboard, account_source_selection_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
class AddAccountStates(StatesGroup):
    waiting_for_source = State()  # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    waiting_for_name = State()    # –ü–æ—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    waiting_for_credentials = State()  # –ü–æ—Ç–æ–º –ª–æ–≥–∏–Ω;—Ç–æ–∫–µ–Ω;—Ü–µ–ª–∏


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
class BulkAddAccountStates(StatesGroup):
    waiting_for_bulk_data = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
class DeleteAccountStates(StatesGroup):
    waiting_for_account_id = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class DetailedReportStates(StatesGroup):
    waiting_for_account_id = State()


# –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
@router.message(Command("start", "menu"))
async def menu_command(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
@router.callback_query(F.data == "add_account")
async def add_account_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=account_source_selection_keyboard())
    await state.set_state(AddAccountStates.waiting_for_source)
    await callback.answer()


@router.callback_query(AddAccountStates.waiting_for_source, F.data.startswith("select_source_"))
async def process_source_selection(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source = callback.data.replace("select_source_", "")
    await state.update_data(source=source.upper())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if source == "YANDEX_BUSINESS":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ë–∏–∑–Ω–µ—Å–∞: ...")
        await state.set_state(AddAccountStates.waiting_for_name)
        await callback.answer()
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏):")
        await state.set_state(AddAccountStates.waiting_for_name)
        await callback.answer()


@router.message(AddAccountStates.waiting_for_name)
async def process_account_name(message: Message, state: FSMContext):
    account_name = message.text.strip()
    await state.update_data(account_name=account_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    source = data.get("source")

    if source == "YANDEX_BUSINESS":
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ë–∏–∑–Ω–µ—Å
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ø–Ω–¥–µ–∫—Å.–ë–∏–∑–Ω–µ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "login;token\n"
            "–ü—Ä–∏–º–µ—Ä: my-business;y0_token123"
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω;—Ç–æ–∫–µ–Ω;—Ü–µ–ª–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: my-account;y0_token123;123,456,789\n"
            "–ì–¥–µ —Ü–µ–ª–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
        )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è credentials
    await state.set_state(AddAccountStates.waiting_for_credentials)


@router.message(AddAccountStates.waiting_for_credentials)
async def process_credentials(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        source = data.get("source")
        account_name = data.get("account_name")
        user_id = message.chat.id  # <- –ø–æ–ª—É—á–∞–µ–º chat_id –∑–¥–µ—Å—å

        if source == "YANDEX_BUSINESS":
            login, token = message.text.strip().split(";")
            auth = {"login": login.strip(), "token": token.strip()}

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å user_id
            await add_account(
                source=Source(source).value,
                auth=auth,
                account_name=account_name,
                user_id=user_id
            )
            await message.answer(
                f"–ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å.–ë–∏–∑–Ω–µ—Å {account_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
                reply_markup=main_menu_keyboard()
            )
            await state.clear()

        else:
            login, token, goals_str = message.text.strip().split(";")
            try:
                goals = [int(g.strip()) for g in goals_str.split(",") if g.strip()]
            except ValueError:
                await message.answer(
                    "–û—à–∏–±–∫–∞: —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                )
                return

            auth = {"login": login.strip(), "token": token.strip(), "goals": goals}

            await add_account(
                source=Source(source).value,
                auth=auth,
                account_name=account_name,
                user_id=user_id
            )
            await message.answer(
                f"–ê–∫–∫–∞—É–Ω—Ç –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç {account_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", 
                reply_markup=main_menu_keyboard()
            )
            await state.clear()

    except ValueError as e:
        if "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫" in str(e):
            await message.answer(str(e))
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n" "—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: " + str(e))
        return



# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
@router.callback_query(F.data == "list_accounts")
async def list_accounts(callback: CallbackQuery):
    accounts = await get_all_accounts()
    if not accounts:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç", reply_markup=main_menu_keyboard())
        await callback.answer()
        return

    text = "üìã *–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:*\n\n"
    for acc in accounts:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source = acc['source'].replace("_", "\\_")
        text += (
            f"ID: `{acc['id']}`\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {acc['account_name']}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
            f"\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            chunk = text[x : x + 4096]
            await callback.message.answer(chunk, parse_mode="Markdown")
    else:
        await callback.message.answer(text, parse_mode="Markdown")

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    await callback.answer()


# --- –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
@router.callback_query(F.data == "bulk_add_accounts")
async def bulk_add_account_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        '[{"source": "yandex_direct", "auth": {"login": "user1", "token": "token1", "goals": [1,2,3]}}, ...]'
    )
    await state.set_state(BulkAddAccountStates.waiting_for_bulk_data)
    await callback.answer()


@router.message(BulkAddAccountStates.waiting_for_bulk_data)
async def bulk_add_account_receive(message: Message, state: FSMContext):
    try:
        accounts = json.loads(message.text)
        if not isinstance(accounts, list):
            raise ValueError("–û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        for acc in accounts:
            source = acc.get("source")
            auth = acc.get("auth")
            if not source or not auth:
                continue
            await add_account(source=source.lower(), auth=auth)
        await message.answer("–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=main_menu_keyboard())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    await state.clear()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
@router.callback_query(F.data == "delete_account")
async def delete_account_start(callback: CallbackQuery, state: FSMContext):
    accounts = await get_all_accounts()
    if not accounts:
        await callback.message.answer(
            "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DeleteAccountStates.waiting_for_account_id)
    await callback.answer()


@router.message(DeleteAccountStates.waiting_for_account_id)
async def delete_account_receive(message: Message, state: FSMContext):
    try:
        account_id = int(message.text.strip())
        await delete_account(account_id)
        await message.answer(
            f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} —É–¥–∞–ª—ë–Ω.", reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    await state.clear()


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤ ---
@router.callback_query(F.data == "get_budgets")
async def get_budgets(callback: CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–≤:",
        reply_markup=source_selection_keyboard(report_type="budgets"),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("source_budgets_"))
async def get_budgets_source(callback: CallbackQuery):
    source = callback.data.replace("source_budgets_", "")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    progress_message = await callback.message.answer("‚è≥ *–ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –ø–æ –±—é–¥–∂–µ—Ç–∞–º...*", parse_mode="Markdown")
    await callback.answer()
    
    try:
        processor = ReportProcessor(source=Source(source), db_path="accounts.db")
        report = await processor.get_budgets_report()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await progress_message.delete()
        
        await callback.message.answer(report, parse_mode="Markdown")
    except Exception as e:
        error_text = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`").replace("[", "\\[").replace("]", "\\]")
        await progress_message.edit_text(f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç—á–µ—Ç–∞:*\n{error_text}", parse_mode="Markdown")


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
@router.callback_query(F.data == "get_summary_report")
async def get_summary_report(callback: CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=period_selection_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("period_"))
async def process_period_selection(callback: CallbackQuery, state: FSMContext):
    period = callback.data.replace("period_", "")
    print("CALLBACK DATA:", callback.data)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_period=period)
    
    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {'—Å–µ–≥–æ–¥–Ω—è' if period == 'today' else '–≤—á–µ—Ä–∞'}:",
        reply_markup=source_selection_keyboard(report_type="summary", period=period),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("source_summary_"))
async def get_summary_report_source(callback: CallbackQuery, state: FSMContext):
    callback_data = callback.data.replace("source_summary_", "")
    print("CALLBACK DATA:", callback.data)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–∏–æ–¥–µ
    if "_" in callback_data:
        period, source = callback_data.split("_", 1)
    else:
        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        source = callback_data
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        period = user_data.get("selected_period", "today")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    progress_message = await callback.message.answer("‚è≥ *–ì–æ—Ç–æ–≤–ª—é —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç...*", parse_mode="Markdown")
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        processor = ReportProcessor(source=Source(source), db_path="accounts.db")
        
        if period == "today":
            report = await processor.get_today_summary_report()
        else:  # period == "yesterday"
            report = await processor.get_yesterday_summary_report()

        print(len(report))
        report_parts = report.split("‚Ä¢")
        
        # Remove empty first element if it exists
        if report_parts and not report_parts[0].strip():
            report_parts = report_parts[1:]
        
        # Group account entries and add bullet point back
        for i in range(0, len(report_parts), 10):
            chunk = report_parts[i:i+10]
            # Add bullet point back to each part except the first in each message
            formatted_chunk = "‚Ä¢ " + "‚Ä¢".join(chunk)
            await callback.message.answer(formatted_chunk, parse_mode="Markdown")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await progress_message.delete()
        
        #await callback.message.answer(report, parse_mode="Markdown")
    except Exception as e:
        error_text = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`").replace("[", "\\[").replace("]", "\\]")
        await progress_message.edit_text(f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç—á–µ—Ç–∞:*\n{error_text}", parse_mode="Markdown")


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
@router.callback_query(F.data == "get_detailed_report")
async def get_detailed_report(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    accounts = await get_all_accounts(db_path="accounts.db")
    
    if not accounts:
        await callback.message.answer(
            "‚ùå *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤*", 
            parse_mode="Markdown",
            reply_markup=main_menu_keyboard()
        )
        await callback.answer()
        return
    
    # –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", 
        parse_mode="Markdown"
    )
    await state.set_state(DetailedReportStates.waiting_for_account_id)
    await callback.answer()


@router.message(DetailedReportStates.waiting_for_account_id)
async def process_detailed_report_account_id(message: Message, state: FSMContext):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –≤ —á–∏—Å–ª–æ
        account_id = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account = await get_account_by_id(account_id, db_path="accounts.db")
        if not account:
            await message.answer(
                "‚ùå *–ê–∫–∫–∞—É–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                parse_mode="Markdown"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_message = await message.answer(
            f"‚è≥ *–ì–æ—Ç–æ–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['account_name']}...*", 
            parse_mode="Markdown"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
            processor = ReportProcessor(source=Source(account['source'].upper()), db_path="accounts.db")
            reports = await processor.get_detailed_report(account_id)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await progress_message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for report in reports:
                # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
                if len(report) > 4096:
                    for x in range(0, len(report), 4096):
                        chunk = report[x:x + 4096]
                        await message.answer(chunk, parse_mode="Markdown")
                else:
                    await message.answer(report, parse_mode="Markdown")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
            await state.clear()
            
        except Exception as e:
            error_text = str(e).replace("_", "\\_").replace("*", "\\*").replace("`", "\\`").replace("[", "\\[").replace("]", "\\]")
            await progress_message.edit_text(f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç—á–µ—Ç–∞:*\n{error_text}", parse_mode="Markdown")
            await state.clear()
            
    except ValueError:
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∞–∫–∫–∞—É–Ω—Ç–∞*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            parse_mode="Markdown"
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    await callback.answer()


# --- –û —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ---
@router.callback_query(F.data == "about")
async def about(callback: CallbackQuery):
    text = (
"""
–û –±–æ—Ç–µ

–î–∞–Ω–Ω—ã–π –±–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –ø—Ä–µ–¥–∑–Ω–∞–Ω–∞—á–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç –∏ –Ø–Ω–¥–µ–∫—Å.–ë–∏–∑–Ω–µ—Å.

–†–µ–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: https://github.com/Venisimo/tg_bot_YBusiness_Direct

"""
    )
    await callback.message.answer(text, reply_markup=main_menu_keyboard())
    await callback.answer()


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@router.error()
async def error_handler(event: ErrorEvent):
    if isinstance(event.exception, TelegramBadRequest) and "query is too old" in str(event.exception):
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º callback query, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if event.update.callback_query:
            await event.update.callback_query.message.answer(
                "‚ùå –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu_keyboard()
            )
